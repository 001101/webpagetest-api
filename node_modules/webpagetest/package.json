{
  "name": "webpagetest",
  "version": "0.0.2",
  "description": "WebPageTest API wrapper for NodeJS",
  "author": {
    "name": "Marcel Duran",
    "email": "github@marcelduran.com",
    "url": "http://github.com/marcelduran"
  },
  "homepage": "http://github.com/marcelduran/webpagetest-api",
  "keywords": [
    "webpagetest",
    "api",
    "performance",
    "test",
    "browser"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/marcelduran/webpagetest-api/raw/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/marcelduran/webpagetest-api.git"
  },
  "bugs": {
    "url": "http://github.com/marcelduran/webpagetest-api/issues"
  },
  "main": "lib/webpagetest.js",
  "bin": {
    "webpagetest": "bin/webpagetest"
  },
  "scripts": {
    "test": "vows --spec test/*-test.js"
  },
  "engines": {
    "node": ">=0.8.1"
  },
  "dependencies": {
    "jsonml": "~0.0.4",
    "commander": "~1.0.1"
  },
  "devDependencies": {
    "vows": "~0.6.4",
    "nock": "~0.13.4"
  },
  "readme": "## WebPageTest API Wrapper for NodeJS [![Build Status](https://secure.travis-ci.org/marcelduran/webpagetest-api.png?branch=master)](http://travis-ci.org/marcelduran/webpagetest-api)\n\n[WebPageTest API Wrapper](http://marcelduran.com/webpagetest-api) is a [NPM](http://npmjs.org) package that wraps [WebPageTest](http://code.google.com/p/webpagetest/) API for [NodeJS](http://nodejs.org) as a module and a command-line tool.\n\n## Getting started\n\n```bash\n$ npm install webpagetest -g\n```\n\n## Basics\n\n### Command line\n```bash\n$ webpagetest test http://twitter.com/marcelduran\n```\n\n### Module\n```javascript\nvar WebPageTest = require('webpagetest');\nvar wpt = new WebPageTest('www.webpagetest.org');\n\nwpt.runTest('http://twitter.com/marcelduran', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n```\n\n## API Console Demo\n\n[marcelduran.com/webpagetest-api](http://marcelduran.com/webpagetest-api/console/)\n\n## Command Line\n\n### Help\n```bash\n$ webpagetest --help\n```\n\n### Commands\n* **status** _\\<id\\>_: check test status\n* **results** _\\<id\\>_: get test results\n* **locations**: list locations and the number of pending tests\n* **testers**: list testers status and details\n* **test** _[options] \\<url_or_script\\>_: run test, _\\<url_or_script\\>_ can also be a path to a script file\n* **cancel** _\\<id\\>_: cancel running/pending test\n* **har** _\\<id\\>_: get the HTTPS Archive (HAR) from test\n* **pagespeed** _[options] \\<id\\>_: get the Google Page Speed results (if available) from test\n* **utilization** _[options] \\<id\\>_: get the CPU, bandwidth and memory utilization data from test\n* **request** _[options] <\\id\\>_: get the request data from test\n* **timeline** _[options] \\<id\\>_: get the Chrome Developer Tools Timeline data (if available) from test\n* **netlog** _[options] \\<id\\>_: get the Chrome Developer Tools Net log data (if available) from test\n* **console** _[options] \\<id\\>_: get the browser console log data (if available) from test\n* **testinfo** _\\<id\\>_: get test request info/details\n* **waterfall** _[options] \\<id\\>_: get the waterfall PNG image\n* **screenshot** _[options] \\<id\\>_: get the fully loaded page screenshot in JPG format (PNG if in full resolution)\n* **listen** _[port]_: start webpagetest-api server on port [7791]\n\n### Options\n\n#### Common (works for all commands)\n* **-s, --server** _\\<server\\>_: the WPT server URL [http://www.webpagetest.org]\n* **-d, --dryrun**: just return the RESTful API URL\n* **-o, --out** _\\<file\\>_: place the output into \\<file\\>. Defaults to stdout\n\n_The default WPT server can also be specified via environment variable `WEBPAGETEST_SERVER`_\n\n#### Test (works for **test** command only)\n* **-k, --key** _\\<api_key\\>_:API key (if assigned). Contact the WebPageTest server administrator for a key if required\n* **-l, --location** _\\<location\\>_: location to test from\n* **-r, --runs** _\\<number\\>_: number of test runs [1]\n* **-f, --first**: skip the Repeat View test\n* **-L, --label** _\\<label\\>_: label for the test\n* **-p, --private**: keep the test hidden from the test log\n* **-v, --video**: capture video\n* **-y, --connectivity** _\\<profile\\>_: connectivity profile (DSL|FIOS|Dial|custom) [DSL]\n* **-m, --dom** _\\<element\\>_: DOM element to record for sub-measurement\n* **-c, --connections** _\\<number\\>_: override the number of concurrent connections\n* **-i, --onload**: force the test to stop at window.onload\n* **-t, --sensitive**: discard script and http headers in the result\n* **-b, --block** _\\<urls\\>_: space-delimited list of urls to block (substring match)\n* **-g, --login** _\\<username\\>_: username for authenticating tests (http authentication)\n* **-w, --password** _\\<password\\>_: password for authenticating tests (http authentication)\n* **-a, --authtype** _\\<type\\>_: type of authentication: 0 = Basic, 1 = SNS [0]\n* **-e, --request** _\\<id\\>_: echo request ID, useful to track asynchronous requests\n* **-n, --notify** _\\<e-mail\\>_: e-mail address to notify with the test results\n* **-B, --pingback** _\\<url\\>_: URL to ping when the test is complete (the test ID will be passed as an \"id\" parameter)\n* **-D, --bwdown** _\\<bandwidth\\>_: download bandwidth in Kbps (used when specifying a custom connectivity profile)\n* **-U, --bwup** _\\<bandwidth\\>_: upload bandwidth in Kbps (used when specifying a custom connectivity profile)\n* **-Y, --latency** _\\<time\\>_: first-hop Round Trip Time in ms (used when specifying a custom connectivity profile)\n* **-P, --plr** _\\<percentage\\>_: packet loss rate - percent of packets to drop (used when specifying a custom connectivity profile)\n* **-u, --tcpdump**: enable tcpdump capture\n* **-z, --noopt**: disable optimization checks (for faster testing)\n* **-I, --noimages**: disable screen shot capturing\n* **-H, --noheaders**: disable saving of the http headers (as well as browser status messages and CPU utilization)\n* **-F, --full**: save a full-resolution version of the fully loaded screen shot as a PNG\n* **-j, --jpeg** _\\<level\\>_: jpeg compression level (30-100) for the screen shots and video capture\n* **-S, --noscript**: disable javascript (IE, Chrome, Firefox)\n* **-R, --ignoressl**: ignore SSL certificate errors, e.g. name mismatch, self-signed certificates, etc\n* **-T, --standards**: forces all pages to load in standards mode (IE only)\n* **-O, --bodies**: save response bodies for text resources\n* **-K, --keepua**: do not add PTST to the original browser User Agent string\n* **-N, --duration** _\\<seconds\\>_: minimum test duration in seconds\n* **-A, --noads**: block ads defined by adblockrules.org\n* **-E, --aft**: (experimental) measure above-the-fold rendering time\n* **-M, --timeline**: capture Developer Tools Timeline (Chrome only)\n* **-G, --netlog**: capture Network Log (Chrome only)\n* **-Z, --spof** _\\<domains\\>_: space-delimited list of domains to simulate failure by re-routing to blackhole.webpagetest.org to silently drop all requests\n\n#### Run (works for **pagespeed**, **utilization**, **request**, **timeline**, **netlog**, **console**, **waterfall** and **screenshot** commands)\n* **-r, --run** _\\<number\\>_: which run number on a multiple runs test [1]\n* **-c, --cached**: get the Repeat View (cached view) instead of default First View (primed cache)\n\n#### Image (works for **waterfall** and **screenshot** commands)\n* **-t, --thumbnail**: get the thumbnail of actual image\n* **-u, --uri**: return the base64 string representation (inline) of actual image\n\n#### Screenshot (works for **screenshot** command only)\n* **-f, --full**: get full resolution screenshot in PNG format if available\n* **-n, --render**: get the page screenshot at the Start Render point (i.e.: when something was first displayed on screen)\n* **-p, --complete**: get the page screenshot at the Document Complete point (i.e.: when window.onload was fired)\n\n### Examples\n#### 1. Get available locations\n```bash\n$ webpagetest locations\n```\n```javascript\n{\n  \"response\": {\n    \"statusCode\": 200, \"statusText\": \"Ok\",\n    \"data\": {\n      \"location\": [\n        ...\n        {\n          \"id\": \"SanJose_IE9\",\n          \"Label\": \"San Jose, CA USA (IE 9,Chrome,Firefox)\",\n          \"location\": \"SanJose_IE9\",\n          \"Browser\": \"IE 9\",\n          \"PendingTests\": {\n            \"p1\": 0, \"p2\": 0, \"p3\": 0, \"p4\": 0, \"p5\": 2, \"p6\": 2, \"p7\": 0,\n            \"p8\": 0, \"p9\": 0, \"Total\": 7, \"HighPriority\": 2, \"LowPriority\": 4,\n            \"Testing\": 1, \"Idle\": 0\n          }\n        },\n        ...\n      ]\n    }\n  }\n}\n```\n\n#### 2. Run test on http://twitter.com/marcelduran from San Jose on IE9\n```bash\n$ webpagetest test http://twitter.com/marcelduran --key 1F2A3K4E5 --location SanJose_IE9\n```\n```javascript\n{\n  \"statusCode\": 200,\n  \"statusText\": \"Ok\",\n  \"data\": {\n    \"testId\": \"121025_PT_N8K\",\n    \"ownerKey\": \"868cb2813a0f376a977dd1a24ab041b4f12361b3\",\n    \"jsonUrl\": \"http://localhost/results.php?test=121025_PT_N8K&f=json\",\n    \"xmlUrl\": \"http://localhost/xmlResult.php?test=121025_PT_N8K\",\n    \"userUrl\": \"http://localhost/results.php?test=121025_PT_N8K\",\n    \"summaryCSV\": \"http://localhost/csv.php?test=121025_PT_N8K\",\n    \"detailCSV\": \"http://localhost/csv.php?test=121025_PT_N8K&amp;requests=1\"\n  }\n}\n```\n\n#### 3. Check current test status\n```bash\n$ webpagetest status 121025_PT_N8K\n```\n```javascript\n{\n  \"statusCode\": 101,\n  \"statusText\": \"Test Pending\",\n  \"data\": {\n    \"statusCode\": 101,\n    \"statusText\": \"Test Pending\",\n    \"testId\": \"121025_PT_N8K\",\n    \"runs\": 1,\n    \"fvonly\": 0,\n    \"location\": \"SanJose_IE9\"\n  }\n}\n```\n\n#### 4. Get test results\n```bash\n$ webpagetest results 121025_PT_N8K\n```\n```javascript\n{\n  \"response\": {\n    \"statusCode\": 200, \"statusText\": \"Ok\",\n    \"data\": {\n      \"testId\": \"121025_PT_N8K\",\n      \"summary\": \"http://www.webpagetest.org/result/121025_PT_N8K/\",\n      \"testUrl\": \"http://twitter.com/marcelduran\",\n      \"location\": \"SanJose_IE9\",\n      \"connectivity\": \"DSL\",\n      \"bwDown\": 1500, \"bwUp\": 384, \"latency\": 50, \"plr\": 0,\n      \"completed\": \"Thu, 25 Oct 2012 23:42:11 +0000\",\n      \"runs\": 1, \"successfulFVRuns\": 1,\n      \"average\": {\n        \"firstView\": {\n          \"loadTime\": 3942, \"TTFB\": 1518,\n          \"bytesIn\": 963405, \"bytesInDoc\": 431612,\n          \"requests\": 32, \"requestsDoc\": 19,\n          \"render\": 2509, \"fullyLoaded\": 7765,\n          \"docTime\": 3942, \"domTime\": 0,\n          \"titleTime\": 1641, \"avgRun\": 1\n        }\n      },\n      ...\n    }\n  }\n}\n```\n\n#### 5. Get test waterfall thumbnail from repeat view as data URI\n```bash\n$ webpagetest waterfall 121025_PT_N8K --thumbnail --cached --uri\n```\n```javascript\n{\n  \"type\": \"image/png\",\n  \"data\": \"iVBORw0KGgoAAAANSUhEUgA...RK5CYII=\"\n}\n```\n\n## Module\n\n### Methods\n* `getTestStatus(id, options, callback)`\n* `getTestResults(id, options, callback)`\n* `getLocations(options, callback)`\n* `getTesters(options, callback)`\n* `runTest(url_or_script, options, callback)`\n* `cancelTest(id, options, callback)`\n* `getHARData(id, options, callback)`\n* `getPageSpeedData(id, options, callback)`\n* `getUtilizationData(id, options, callback)`\n* `getRequestData(id, options, callback)`\n* `getTimelineData(id, options, callback)`\n* `getNetLogData(id, options, callback)`\n* `getConsoleLogData(id, options, callback)`\n* `getTestInfo(id, options, callback)`\n* `getWaterfallImage(id, options, callback)`\n* `getScreenshotImage(id, options, callback)`\n* `listen(port, callback)`\n* `scriptToString(script)`\n\n### Parameters\n* **id**: test ID string _required_\n* **options**: parameters object _optional_, see below\n* **callback**: the callback `function(error, data)` _optional_\n* **url_or_script**: decoded url or script string _required_\n* **port**: port number _optional_ \\[default: 7791\\]\n* **script**: script array in the format:\n\n```javascript\n[\n  {command1: 'value1'},\n  {command2: 123},\n  {command3: ['value1', 'value2', ... , 'valueN']},\n  ...\n  'commandN'}\n]\n```\n\n#### Notes\n\n* `getWaterfallImage` and `getScreenshotImage` callback function has a third parameter `info` which is an object with `{type: 'image/jpeg or png', encoding: 'utf8 or binary'}`\n* `scriptToString` script array values 1-N are optional. e.g:\n\n```javascript\nvar script = wpt.scriptToString([\n  {logData: 0},\n  {navigate: 'http://foo.com/login'},\n  {logData: 1},\n  {setValue: ['name=username', 'johndoe']},\n  {setValue: ['name=password', '12345']},\n  {submitForm: 'action=http://foo.com/main'},\n  'waitForComplete'\n]);\nwpt.runTest(script, function (err, data) {console.log(err || data);});\n```\n\n### Options\n#### Common (works for all methods with `options` parameter)\n* **dryRun**: _Boolean_, if `true`, method does not make an actual request to the API Server but rather returns an object with `url` which contains the actual URL to make the GET request to WebPageTest API Server\n* **server**: _String_, if specified, overrides the WebPageTest server informed in the constructor only for that method call\n\n#### Test (works for `runTest` method only)\n* **key**: _String_, API key (if assigned). Contact the WebPageTest server administrator for a key if required\n* **location**: _String_, location to test from\n* **runs**: _Number_, number of test runs [1]\n* **firstViewOnly**: _Boolean_, skip the Repeat View test\n* **label**: _String_, label for the test\n* **private**: _Boolean_, keep the test hidden from the test log\n* **video**: _Boolean_, capture video\n* **connectivity**: _String_, connectivity profile (DSL|FIOS|Dial|custom) [DSL]\n* **domElement**: _String_, DOM element to record for sub-measurement\n* **connections**: _Number_, override the number of concurrent connections\n* **stopAtDocumentComplete**: _Boolean_, force the test to stop at window.onload\n* **sensitive**: _Boolean_, discard script and http headers in the result\n* **block**: _[String]_, array of string of urls to block (substring match)\n* **login**: _String_, username for authenticating tests (http authentication)\n* **password**: _String_, password for authenticating tests (http authentication)\n* **authenticationType**: _Number_, type of authentication: 0 = Basic, 1 = SNS [0]\n* **requestId**: _String_, echo request ID, useful to track asynchronous requests\n* **notifyEmail**: _String_, e-mail address to notify with the test results\n* **pingback**: _String_, URL to ping when the test is complete (the test ID will be passed as an \"id\" parameter)\n* **bandwidthDown**: _String_, download bandwidth in Kbps (used when specifying a custom connectivity profile)\n* **bandwidthUp**: _String_, upload bandwidth in Kbps (used when specifying a custom connectivity profile)\n* **latency**: _String_, first-hop Round Trip Time in ms (used when specifying a custom connectivity profile)\n* **packetLossRate**: _Number_, packet loss rate - percent of packets to drop (used when specifying a custom connectivity profile)\n* **tcpDump**: _Boolean_, enable tcpdump capture\n* **disableOptimization**: _Boolean_, disable optimization checks (for faster testing)\n* **disableScreenshot**: _Boolean_, disable screen shot capturing\n* **disableHTTPHeaders**: _Boolean_, disable saving of the http headers (as well as browser status messages and CPU utilization)\n* **fullResolutionScreenshot**: _Boolean_, save a full-resolution version of the fully loaded screen shot as a PNG\n* **jpegQuality**: _Number_, jpeg compression level (30-100) for the screen shots and video capture\n* **disableJavaScript**: _Boolean_, disable javascript (IE, Chrome, Firefox)\n* **ignoreSSL**: _Boolean_, ignore SSL certificate errors, e.g. name mismatch, self-signed certificates, etc\n* **disableCompatibilityView**: _Boolean_, forces all pages to load in standards mode (IE only)\n* **saveResponseBodies**: _Boolean_, save response bodies for text resources\n* **keepOriginalUserAgent**: _Boolean_, do not add PTST to the original browser User Agent string\n* **minimumDuration**: _String_, minimum test duration in seconds\n* **blockAds**: _Boolean_, block ads defined by adblockrules.org\n* **aftRenderingTime**: _Boolean_, (experimental) measure above-the-fold rendering time\n* **timeline**: _Boolean_, capture Developer Tools Timeline (Chrome only)\n* **netLog**: _Boolean_, capture Network Log (Chrome only)\n* **spof**: _[String]_, array of string of domains to simulate failure by re-routing to blackhole.webpagetest.org to silently drop all requests\n\n#### Run (works for `getPageSpeedData`, `getUtilizationData`, `getRequestData`, `getTimelineData`, `getNetLogData`, `getConsoleLogData`, `getWaterfallImage` and `getScreenshotImage` methods)\n* **run**: _Number_, the test run number for multiple runs tests (default: 1, first test)\n* **repeatView**: _Boolean_, if `true` returns the repeat view (cached) data\n\n#### Image (works for `getWaterfallImage` and `getScreenshotImage` methods)\n* **thumbnail**: _Boolean_, returns the thumbnail of actual image\n* **dataURI**: _Boolean_, returns the base64 string representation (inline) of actual image\n\n#### Screenshot (works for `getScreenshotImage` method only)\n* **fullResolution**: _Boolean_, returns the full resolution screenshot in PNG format if available\n* **startRender**: _Boolean_, returns the page screenshot at the Start Render point (i.e.: when something was first displayed on screen)\n* **documentComplete**: _Boolean_, returns the page screenshot at the Document Complete point (i.e.: when `window.onload` was fired)\n\n### Examples\n\n#### 1. Instantiating\n```javascript\nvar WebPageTest = require('webpagetest');\n\nvar wpt = new WebPageTest('my-wpt.foo.com'); // default: www.webpagetest.org\nvar wptPublic = new WebPageTest('www.webpagetest.org', 'MY_API_KEY');\n```\n\n#### 2. Get available locations\n```javascript\nwpt.getLocations(function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n```\n\n#### 3. Run test on http://twitter.com/marcelduran from San Jose on IE9\n```javascript\nwpt.runTest('http://twitter.com/marcelduran', {location: 'SanJose_IE9'}, function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n```\n\n#### 4. Check current test status\n```javascript\nwpt.getTestStatus('121025_PT_N8K', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n```\n\n#### 5. Get test results\n```javascript\nwpt.getTestResults('121025_PT_N8K', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n```\n\n#### 6. Get test waterfall thumbnail from repeat view as data URI\n```javascript\nwpt.getWaterfallImage('121025_PT_N8K', {\n  thumbnail: true,\n  repeatView: true,\n  dataURI: true\n}, function (err, data, info) {\n    if (err) throw err;\n    console.log(data, info);\n  }\n);\n```\n\n## Server mode\nWebPageTest API Wrapper comes with a handy RESTful API proxy\n\n### Command Line\n```bash\n$ webpagetest listen 8080 --server wpt.foo.com\n```\n```bash\nserver listening on port 8080\nhttp://localhost:8080\n```\n```bash\n$ curl http://localhost:8080/help\n$ curl http://localhost:8080/test/twitter.com/?location=SanJose_IE9\n```\n\n#### Notes\n* port _8080_ is optional, default port is _7791_\n* `wpt.foo.com` is overriding the default `www.webpagetest.org` server but can still be overridden with `server` option\n\n### Module\n```javascript\nvar server = wpt.listen(8080, function(err, data) {\n  if (err) throw err;\n  console.log('listening on ' + data.url);\n}); // listen on port 8080 (optional), default port is 7791\n\nsetTimeout(function() {\n  server.close(function() {\n    console.log('listening done');\n  });\n}, 10000); // wait for 10s before stop listening\n```\n\n## Issues\n\nHave a bug/feature request? Please create an issue here on GitHub!\n\nhttps://github.com/marcelduran/webpagetest-api/issues\n\n## Author\n\n**Marcel Duran**\n\n+ http://github.com/marcelduran\n\n## License\n\nCopyright 2013 Twitter, Inc. and other contributors\n\nLicensed under the [MIT License](http://github.com/marcelduran/webpagetest-api/raw/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "webpagetest@0.0.2",
  "_from": "webpagetest@0.0.2"
}
